{"version":3,"sources":["App.tsx","serviceWorker.ts","MyBtn.tsx","index.tsx"],"names":["App","resource","console","log","className","style","display","read","Boolean","window","location","hostname","match","Btn","styled","button","props","btnColor","MyBtn","onClick","children","useState","color","setColor","e","Fallback","state","pending","promise","Promise","this","setState","then","fallback","Component","getData","id","r","setTimeout","Math","random","createResource","response","reason","status","suspender","res","catch","data","initResource","Other","setResource","ref","useRef","flexDirection","justifyContent","alignItems","marginTop","current","aaaHOC","ChildComponent","aaaP","name","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8490ec9f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n// import {\n//   FormattedMessage,\n//   FormattedDate,\n//   FormattedTime,\n//   FormattedRelativeTime,\n//   FormattedDateParts,\n//   useIntl\n// } from \"react-intl\";\n\nfunction App({\n  // setLocale,\n  resource\n}: {\n  // setLocale: (locale: string) => void;\n  resource: { read: () => any };\n}) {\n  // const intl = useIntl();\n  // console.log(intl);\n  // const [data, setData] = useState<{ read: () => string }>();\n  // console.log(data);\n  // let str = data;\n  console.log(\"app render\");\n  console.log(\"777777\");\n  console.log(\"888888\");\n  console.log(\"666666\");\n  console.log(\"555555\");\n  return (\n    <div\n      className=\"App\"\n      style={{\n        display: \"flex\"\n        // flexDirection: \"column\",\n        // justifyContent: \"center\",\n        // alignItems: \"center\"\n      }}\n    >\n      {/* <button onClick={() => setLocale(\"en\")} style={{ margin: 20 }}>\n        英文\n      </button>\n      <button onClick={() => setLocale(\"zh-TW\")} style={{ margin: 20 }}>\n        中文\n      </button> */}\n      <div>data:{resource.read()}</div>\n      {/* <div>\n        <FormattedMessage\n          id=\"appTitle\"\n          values={{\n            titleName: <span style={{ color: \"blue\" }}>react-intl</span>\n          }}\n          tagName=\"p\"\n        ></FormattedMessage>\n        <div className=\"date\" style={{ padding: 20 }}>\n          <FormattedDate\n            value={new Date()}\n            year=\"numeric\"\n            month=\"long\"\n            day=\"2-digit\"\n            weekday=\"long\"\n          ></FormattedDate>\n        </div>\n        <div className=\"date-part\">\n          <FormattedDateParts\n            value={new Date()}\n            year=\"numeric\"\n            month=\"long\"\n            day=\"2-digit\"\n            weekday=\"long\"\n          >\n            {parts => (\n              <>\n                {parts.map((part, i) => (\n                  <div key={part.value + i}>{part.value}</div>\n                ))}\n              </>\n            )}\n          </FormattedDateParts>\n        </div>\n        <div className=\"time\" style={{ padding: 20 }}>\n          <FormattedTime value={new Date()}></FormattedTime>\n        </div>\n        <div className=\"relative-time\">\n          <FormattedRelativeTime\n            value={\n              // (new Date(\"2020-01-10T15:39:00\").getTime() -\n              //   new Date().getTime()) /\n              // 1000\n              0\n            }\n            numeric=\"auto\"\n            style=\"short\"\n            unit=\"second\"\n            updateIntervalInSeconds={1}\n          ></FormattedRelativeTime>\n        </div>\n      </div> */}\n    </div>\n  );\n}\n\n// class App extends Component<\n//   { setLocale: (locale: string) => void },\n//   { data: { read: () => string | void } }\n// > {\n//   state = {\n//     data: { read() {} }\n//   };\n\n//   fetchData = () => {\n//     // setData(getData(\"\"));\n//     let res = getResource(getData(\"ok\"));\n//     this.setState({ data: res });\n//   };\n//   render() {\n//     return (\n//       <div\n//         className=\"App\"\n//         style={{\n//           display: \"flex\",\n//           flexDirection: \"column\",\n//           justifyContent: \"center\",\n//           alignItems: \"center\"\n//         }}\n//       >\n//         <button\n//           onClick={() => this.props.setLocale(\"en\")}\n//           style={{ margin: 20 }}\n//         >\n//           英文\n//         </button>\n//         <button\n//           onClick={() => this.props.setLocale(\"zh-TW\")}\n//           style={{ margin: 20 }}\n//         >\n//           中文\n//         </button>\n//         <button onClick={this.fetchData}>fetch</button>\n//         <div>data:{this.state.data?.read()}</div>\n//         <div>\n//           <FormattedMessage\n//             id=\"appTitle\"\n//             values={{\n//               titleName: <span style={{ color: \"blue\" }}>react-intl</span>\n//             }}\n//             tagName=\"p\"\n//           ></FormattedMessage>\n//           <div className=\"date\" style={{ padding: 20 }}>\n//             <FormattedDate\n//               value={new Date()}\n//               year=\"numeric\"\n//               month=\"long\"\n//               day=\"2-digit\"\n//               weekday=\"long\"\n//             ></FormattedDate>\n//           </div>\n//           <div className=\"time\" style={{ padding: 20 }}>\n//             <FormattedTime value={new Date()}></FormattedTime>\n//           </div>\n//           <div className=\"relative-time\">\n//             <FormattedRelativeTime\n//               value={0}\n//               numeric=\"auto\"\n//               style=\"short\"\n//               unit=\"second\"\n//               updateIntervalInSeconds={1}\n//             ></FormattedRelativeTime>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { PropsWithChildren, useState } from \"react\";\nimport styled from \"styled-components\";\n\ninterface BtnProps {\n  btnColor?: string;\n}\n\nlet Btn = styled.button<BtnProps>`\n  padding: 20px;\n  color: ${props => props.btnColor || \"#000\"};\n  font-size: 20px;\n  margin-bottom: 20px;\n  font-weight: bold;\n  > .aaa {\n    font-size: 20px;\n    &:hover {\n      margin-top: 20px;\n    }\n  }\n`;\n\nexport function MyBtn(\n  props: PropsWithChildren<{\n    onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => any;\n  }>\n) {\n  console.log(props);\n  const { onClick, children } = props;\n  const [color, setColor] = useState(\"\");\n  return (\n    <Btn\n      btnColor={color}\n      onClick={e => {\n        onClick && onClick(e);\n        setColor(color => (color === \"blue\" ? \"\" : \"blue\"));\n      }}\n    >\n      {children}\n    </Btn>\n  );\n}\n","import React, { useState, Component, useRef, Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { MyBtn } from \"./MyBtn\";\n// import { IntlProvider } from \"react-intl\";\n\n// import { en } from \"./i18n/en\";\n// import { zh_TW } from \"./i18n/zh_TW\";\n\nclass Fallback extends Component<\n  { fallback: React.ReactNode },\n  { pending: boolean }\n> {\n  constructor(props: { fallback: React.ReactNode }) {\n    super(props);\n    this.state = {\n      pending: false\n    };\n    console.log(props);\n  }\n\n  // static getDerivedStateFromError() {\n  //   console.log(\"getDerivedStateFromError\");\n  //   return {\n  //     pending: true\n  //   };\n  // }\n\n  componentDidCatch(e: any) {\n    console.log(\"catch error\");\n    if (e.promise instanceof Promise) {\n      console.log(e);\n      this.setState({ pending: true }, () => {\n        e.promise.then(() => {\n          console.log(\"777\");\n          this.setState({ pending: false });\n        });\n      });\n    }\n  }\n\n  // componentDidCatch(e: any) {\n  // }\n  render() {\n    return (\n      <>\n        {/* <div style={{ display: this.state.pending ? \"none\" : \"block\" }}>\n          {this.props.children}\n        </div>\n        <div style={{ display: this.state.pending ? \"block\" : \"none\" }}>\n          {this.props.fallback}\n        </div> */}\n        {this.state.pending ? this.props.fallback : this.props.children}\n      </>\n    );\n  }\n}\n\nconst getData = (id: number): Promise<string> => {\n  console.log(\"fetch start \", id);\n  return new Promise(r =>\n    setTimeout(\n      () => {\n        switch (id) {\n          case 0:\n            r(\"user 0\");\n            break;\n          case 1:\n            r(\"user 1\");\n            break;\n          case 2:\n            r(\"user 2\");\n            break;\n          case 3:\n            r(\"user 3\");\n            break;\n          default:\n            r(\"defulat user\");\n        }\n      },\n      id === 3 ? 6000 : Math.random() * 1000\n    )\n  );\n};\n\nfunction createResource<T extends any>(promise: Promise<T>) {\n  let response: T;\n  let status = \"pending\";\n  let reason: any;\n  let suspender = promise\n    .then(res => {\n      console.log(\"fetch ok\", res);\n      response = res;\n      status = \"resolved\";\n    })\n    .catch(e => {\n      reason = e;\n      throw e;\n    });\n  let data = {\n    read() {\n      if (status === \"pending\") {\n        console.log(\"pending\", promise);\n\n        throw { promise: suspender };\n      } else if (status === \"resolved\") {\n        console.log(\"resolved\", response);\n\n        return response;\n      } else {\n        console.log(reason);\n        throw reason;\n      }\n    }\n  };\n  return () => {\n    return data;\n  };\n}\n\nfunction getNextId(id: number) {\n  return id === 3 ? 0 : id + 1;\n}\n\n// let { Provider, Consumer } = React.createContext(123);\n// let Con = React.createElement(Consumer, null, (data: number) => (\n//   <div className={`${data}`}>{data}</div>\n// ));\n\n// console.log(React.createElement(Provider, { value: 222 }, Con));\n// console.log(Con);\nexport let initResource = createResource(getData(0));\nfunction Other() {\n  const [resource, setResource] = useState(initResource);\n  const ref = useRef(0);\n  const fetchData = () => {\n    ref.current = getNextId(ref.current);\n    setResource(createResource(getData(ref.current)));\n  };\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        marginTop: 100\n      }}\n    >\n      <MyBtn onClick={fetchData}>fetch</MyBtn>\n      {/* <Provider value={123}>\n        <Consumer>{data => <div>{data}</div>}</Consumer>\n      </Provider>\n      <Provider value={345}>\n        <Consumer>{data => <div>{data}</div>}</Consumer>\n      </Provider> */}\n      <Fallback\n        fallback={\n          <div\n            style={{\n              display: \"flex\"\n              // flexDirection: \"column\",\n              // justifyContent: \"center\",\n              // alignItems: \"center\"\n            }}\n          >\n            Loading...\n          </div>\n        }\n      >\n        <App resource={resource}></App>\n      </Fallback>\n    </div>\n  );\n}\n\nconst Root = () => {\n  // const [locale, setLocale] = useState(navigator.language);\n  // let messages;\n  // if (locale.includes(\"zh-TW\")) {\n  //   messages = zh_TW;\n  // } else {\n  //   messages = en;\n  // }\n  // console.log(\"root render\");\n\n  return (\n    // <IntlProvider\n    //   locale={locale}\n    //   key={locale}\n    //   defaultLocale=\"zh-TW\"\n    //   messages={messages}\n    // >\n\n    <Other></Other>\n    // </IntlProvider>\n  );\n};\n\nfunction aaaHOC<P extends aaaHOCProps>(\n  ChildComponent: React.ComponentType<P>\n): React.ComponentType<P> {\n  return class InAaaHOC extends Component<P> {\n    render() {\n      return (\n        <div className=\"aaa\">\n          aaaHOC\n          <div>\n            <ChildComponent {...this.props} aaaP={\"aaap\"}></ChildComponent>\n          </div>\n        </div>\n      );\n    }\n  };\n}\n\ninterface aaaHOCProps {\n  aaaP: string;\n}\n\nfunction QQ(props: { id: number; name: string } & aaaHOCProps) {\n  return (\n    <div className=\"qq\">\n      QQ\n      <div>QQ id {props.id}</div>\n      <div>QQ name {props.name}</div>\n      <div>QQ aaaP {props.aaaP}</div>\n    </div>\n  );\n}\n\nlet NewQQ = aaaHOC(QQ);\n\nlet RR = aaaHOC(\n  class R extends Component<{} & aaaHOCProps> {\n    render() {\n      return <div className=\"rr\">{this.props.aaaP}</div>;\n    }\n  }\n);\n\nlet As = aaaHOC(function(props) {\n  return (\n    <div className=\"a\">\n      asd\n      {props.aaaP}\n    </div>\n  );\n});\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n// @ts-ignore\n// ReactDOM.createRoot(document.getElementById(\"root\")).render(<Root />);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}